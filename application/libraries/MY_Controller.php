<?php defined('SYSPATH') or die('No direct script access.');/** * @package Core * * Base MY.Engine controller. */class Controller extends Controller_Core {	// Template view name		public $cache;		public $template_file = 'template_view';		public $noindex = false;		public $css_files = array();	public $js_files = array();		public $view;	public $model;	public $errors;	public $messages;	public $warnings;		public $title;	public $parent_title;	public $subtitle;	public $page_description;		public $user;		public $auto_render = TRUE;	/**	 * Template loading and setup routine.	 */		public function __construct()	{				parent::__construct();// Use Profiler		if(Lib::config('app.enableProfiler') != FALSE and !request::is_ajax() and !isset($_GET['print'])) $profiler = new Profiler;				$this->user = Auth::instance()->authorize();				$this->errors = new Message('error');		$this->messages = new Message('message');		$this->warnings = new Message('warning');		// Load the template		$this->template = new View($this->template_file);				$this->template->bind('css_files', $this->css_files);		$this->template->bind('js_files', $this->js_files);				if(Lib::config('app.default_js')):					foreach(Lib::config('app.default_js') as $js):							$this->addJs($js);							endforeach;					endif;				if(Lib::config('app.default_css')):					foreach(Lib::config('app.default_css') as $css):							$this->addCss($css);							endforeach;					endif;						if(isset($_GET['print'])):					$this->addCss('print.css');			$this->addJs('print.js');			$this->printMode = true;					else:					$this->printMode = false;					endif;		if(!$this->isLoggedIn()) $this->addJs('login.js');				if ($this->auto_render === TRUE)		{			// Display the template immediately after the controller method			Event::add('system.post_controller', array($this, '_render'));		}							}/** * Validation related function  */		public function check_captcha(Validation $v){		//		if($v->captcha_code != ''):////////			if(empty($this->captcha)) $this->captcha = new Captcha;////////			if($this->captcha->valid($v->captcha_code)) return true;////////		endif;////////		$v->add_error('captcha_code', 'captcha_code');////		return false;        return true;	}		/** * RENDER RELATED FUNCTIONS */		private function redirect($uri = NULL){		if($uri == NULL and !empty($this->redirect)) $uri = $this->redirect;		if(!empty($uri)) url::redirect($uri);	}		public function _render()	{		try{			if (expires::check(0) === FALSE) expires::set(0);			if(!($ajaxmode = request::is_ajax()) or !empty($this->returnViewInAjax)):					$form_messages = new View('form_messages');			if(!$this->errors->is_empty()) $form_messages->errors = $this->errors->get();			if(!$this->messages->is_empty()) $form_messages->messages = $this->messages->get();			if(!$this->warnings->is_empty()) $form_messages->warnings = $this->warnings->get();				endif;					if(method_exists(AppLib::instance(),'setTemplateVars')) AppLib::instance()->setTemplateVars($this);				if($ajaxmode):					if(!empty($this->returnViewInAjax)):								if(is_object($this->view)):								$this->view->form_messages = $form_messages;					$this->view->title = $this->title;					echo $this->view->render();									elseif(!$this->errors->is_empty() or !$this->messages->is_empty() or !$this->warnings->is_empty()):									echo $form_messages;									endif;							else:										$ret = array();				if(!$this->errors->is_empty()) $ret['errors'] = $this->errors->get();				if(!$this->messages->is_empty()) $ret['messages'] = $this->messages->get();				if(!$this->warnings->is_empty()) $ret['warnings'] = $this->warnings->get();				if(!empty($this->obj)) if(method_exists($this->obj, 'data')): $ret['obj'] = $this->obj->data(@$this->includeindata); else: $ret['obj'] = $this->obj; endif;				if(!empty($this->data)) $ret['data'] = $this->data;				if(!empty($this->redirect)) $ret['redirect'] = $this->redirect;								if($ajaxmode === 2):					echo '<textarea>'. json_encode($ret) . '</textarea>';				else:					echo json_encode($ret);				endif;							endif;					else:					$this->redirect();					if (!empty($this->template) and $this->auto_render === TRUE){							// Render the template when the class is destroyed				$this->template->parent_title = @$this->parent_title;				$this->template->title = @$this->title;				$this->template->page_description = @$this->page_description;								$this->template->printMode = $this->printMode;				$this->template->noindex = $this->noindex;								if($this->template->isLoggedIn = (bool) $this->isLoggedIn()):					$this->template->user = $this->user;				endif;													if(is_object($this->view)):															$this->view->isLoggedIn = (bool) $this->isLoggedIn();										$this->view->form_messages = $form_messages;										$this->view->printMode = $this->printMode;										$this->view->parent_title = @$this->parent_title;					$this->view->title = @$this->title;					$this->view->subtitle = @$this->subtitle;										if(@empty($this->view->obj) and !empty($this->obj)):						$this->view->obj = $this->obj;					endif;														else:									$this->view = $form_messages;									endif;								$this->template->content= $this->view;								$this->template->render(TRUE);			}		endif;				} catch (Kohana_Exception $e) {			$this->handleException($e);		}		}	protected function addJs($js_name) {				if (!isset($this->js_files[$js_name])) {					$path_parts = pathinfo($js_name);			$filename = $path_parts['filename'];						$suffix = '.' . $path_parts['extension'];									if (Lib::config('app.USE_GZIP')) {				if (!Lib::config('app.CHECK_FOR_GZIPPED_FILES_EXISTENCE') || file_exists(Lib::config('app.WEB_ROOT') . Lib::config('app.JS_DIR') . '/' . $filename . $suffix . Lib::config('app.GZIP_SUFFIX'))) {					$suffix .= Lib::config('app.GZIP_SUFFIX');				}						}						if(Lib::config('media.js', $js_name)):				$suffix = '-'.Lib::config('media.js', $js_name).$suffix;			endif;						$this->js_files[$js_name] = Lib::config('app.JS_DIR') . '/' . $filename . $suffix;		}	}    	protected function addCss($css_name) {		if (!isset($this->css_files[$css_name])) {					$path_parts = pathinfo($css_name);			$filename = $path_parts['filename'];						$suffix = '.' . $path_parts['extension'];									if (Lib::config('app.USE_GZIP')) {				if (!Lib::config('app.CHECK_FOR_GZIPPED_FILES_EXISTENCE') || file_exists(Lib::config('app.WEB_ROOT') . Lib::config('app.CSS_DIR') . '/' . $filename . $suffix . Lib::config('app.GZIP_SUFFIX'))) {					$suffix .= Lib::config('app.GZIP_SUFFIX');				}						}							if(Lib::config('media.css', $css_name)):				$suffix = '-'.Lib::config('media.css', $css_name).$suffix;			endif;								$this->css_files[$css_name] = Lib::config('app.CSS_DIR') . '/' . $filename . $suffix;		}	}		protected function isLoggedIn() {		if(!empty($this->user)) return true;		return false;	}		protected function isNotActivated() {		if(!empty($this->user) and $this->user->status === 'disabled') return true;		return false;	}		protected function userEnabled() {		if($this->isLoggedIn() and $this->user->is_enabled) return true;		return false;	}		protected function isAdministrator() {		if($this->isLoggedIn() and $this->user->is_administrator) return true;		return false;	}			protected function isModerator() {		if($this->isLoggedIn() and $this->user->is_moderator) return true;		return false;	}			protected function isAgent() {		if($this->isLoggedIn()):			if($this->isModerator() or $this->roleIs('agent')) return true;		endif;		return false;	}		protected function roleIs($key) {		if($this->isLoggedIn())			if(is_array($key)):				return in_array($this->user->role, $key);			elseif($this->user->role == $key):				return true;			endif;		return false;	}		protected function hasAccess($level = NULL, $value = NULL, $flag = NULL){			$reason = '';				switch($level):			case 'administrator':				if($this->isLoggedIn() and $this->user->is_administrator) return TRUE;			break;			case 'moderator':				if($this->isLoggedIn() and $this->user->is_moderator) return TRUE;			break;			case 'role':				if($this->isLoggedIn() 					and (empty($flag) or $this->userEnabled()) 					and $this->roleIs($value)				)	return true;								if(is_array($value)):					foreach($value as $role):						if(!empty($reason)) $reason .= ' или ';						$reason .= Lib::config('app.user_roles', $role);					endforeach;				else:					$reason .= Lib::config('app.user_roles', $value);				endif;								$reason = ' Вы должны быть авторизированы как ' . $reason;			break;			case 'enabled':				if($this->userEnabled()) return true;				if(!$this->hasAccess('registered')) return false;				elseif($this->user->status === 'banned') $reason = ' Ваша учетная запись заблокирована.';				elseif($this->user->status === 'disabled') $reason = ' Ваша учетная запись не активирована.';			break;			case 'notbanned':				if($this->isLoggedIn() and $this->user->status !== 'banned') return true;				$reason = ' Ваша учетная запись заблокирована.';			break;			case 'registered':			case 'user':			default:				if($this->isLoggedIn() and (empty($value) or $value == $this->user->id)) return TRUE;				if(empty($value)):					$reason = ' Пожалуйста, <a href="/login/" onclick="$(\'#login\').click(); return false;">авторизируйтесь</a>.';				endif;			break;		endswitch;		if(!$this->errors->accessDeniedSet):			$this->errors->accessDeniedSet = true;			$this->errors->add('У вас нет доступа!'. $reason);		endif;				return FALSE;	}	protected function model(){		if(empty($this->model)) return NULL;		return $this->model->class;	}	protected function handleException($e, $message = ''){		$this->errors->add( $message ? $message : 'Произошла внутренняя ошибка. Попробуйте повторить попытку позже.<br>Если ошибка повторится, пожалуйста, <a href="/contacts/">сообщите нам</a>.');		@Lib::log($e);		}}/* ?> */