<?php class date extends date_Core{		static $for_db = "%04d-%02d-%02d %02d:%02d:%02d";	static $date_for_db = "%04d-%02d-%02d";	static $localizedWDateTime = "%d %s (%02s), %02d:%02d";	static $localizedDateTime = "%d %s %04d (%02d:%02d)";	static $localizedDate = "%d %s %04d";	static $localizedDateTimeWOYear = "%2d %s <span>%02d:%02d</span>";		static $months = array('', 'Январь', 'Февраль', 'Март', 'Апрель', 'Май', 'Июнь', 'Июль', 'Август', 'Сентябрь', 'Октябрь', 'Ноябрь', 'Декабрь');	static $declensed_months = array('','января','февраля','марта', 'апреля','мая','июня','июля','августа', 'сентября','октября','ноября','декабря');	static $weekdays = array('ВС','ПН','ВТ','СР','ЧТ','ПТ','СБ');	public static function now($datetime = NULL){					if(empty($datetime)) return time();						if(is_numeric($datetime)) return $datetime;		return strtotime($datetime);	}					public static function getForDb($datetime = NULL) {								$datetime = self::now($datetime);				return sprintf(self::$for_db,			self::getYear($datetime), self::getMonth($datetime), self::getDay($datetime),			self::getHour($datetime), self::getMinute($datetime), self::getSecond($datetime)		);	}		public function getDateForDb($datetime = NULL) {		$datetime = self::now($datetime);				return sprintf(self::$date_for_db,			self::getYear($datetime), self::getMonth($datetime), self::getDay($datetime)		);	}		public function getSimple($datetime = NULL, $format = 'Y-m-d H:i'){		$datetime = self::now($datetime);		return date($format, $datetime);	}	public function getForURL($datetime = NULL, $mode = NULL) {			$datetime = self::now($datetime);				switch($mode):			case 'year':				return self::getYear($datetime);			break;			case 'year-month':				return sprintf("/%04d/%02d", self::getYear($datetime), self::getMonth($datetime));			break;			case 'full':				return sprintf("/%04d/%02d/%02d/%02d/%02d/%02d",					self::getYear($datetime), self::getMonth($datetime), self::getDay($datetime),					self::getHour($datetime), self::getMinute($datetime), self::getSecond($datetime)				);			break;			default:				return sprintf("/%04d/%02d/%02d",					self::getYear($datetime), self::getMonth($datetime), self::getDay($datetime));			break;					endswitch;			}	static $periods = array(//				'centuries' => 3155692600,//				'decades' => 315569260,				'years' => 31536000,//31556926				'months' => 2678400,//2629743				'weeks' => 604800,				'days' => 86400,				'hours' => 3600,				'minutes' => 60,				'seconds' => 1				);					public static function formatPeriod($seconds, $mode = 'days'){		if($mode != '') $seconds *= self::$periods[$mode];						$durations = array();				foreach (self::$periods as $period => $seconds_in_period) {			if ($seconds >= $seconds_in_period) {				$durations[$period] = floor($seconds / $seconds_in_period);				$seconds -= $durations[$period] * $seconds_in_period;			}		}				return $durations;	}	public static function periodToNumber($seconds, $mode = 'days'){		if($mode != '' and isset(self::$periods[$mode])) return floor($seconds/self::$periods[$mode]);						return 0;	}	public function periodLeft($tilldatetime, $fromdatetime = NULL,  $mode = 'days'){		if($fromdatetime == NULL) $fromdatetime = time();				return self::periodToNumber(self::now($tilldatetime) - self::now($fromdatetime), $mode);			}		public function age($birthday = NULL){		if(empty($birthday)) return '';				$birthdate = trim($birthday, '-');				$birthdate .= substr('0000-00-00 00:00:00', strlen($birthdate));		$age = self::periodToNumber(self::now() - self::now($birthdate), 'years');		return format::declension_numerals($age,'год','года','лет')		. ((strlen($birthday) > 7) ? ' ('.date::getLocalizedDate($birthdate).')' : '');			}				public function periodToString($amount, $mode = 'days'){		$durations = self::formatPeriod($amount, $mode);		$str = array();		if(!empty($durations['years'])) $str[] = self::declension_period($durations['years'], 'years');		if(!empty($durations['months'])) $str[] = self::declension_period($durations['months'], 'months');		if(!empty($durations['weeks'])) $str[] = self::declension_period($durations['weeks'], 'weeks');		if(!empty($durations['days'])) $str[] = self::declension_period($durations['days'], 'days');		if(!empty($durations['hours'])) $str[] = self::declension_period($durations['hours'], 'hours');		if(!empty($durations['minutes'])) $str[] = self::declension_period($durations['minutes'], 'minutes');		if(!empty($durations['seconds'])) $str[] = self::declension_period($durations['seconds'], 'seconds');				return join(' ', $str);			}	public static function declension_period($amount, $units = 'days'){		switch($units):			case 'years':				return format::declension_numerals($amount, 'год', 'года', 'лет');			break;			case 'months':				return format::declension_numerals($amount, 'месяц', 'месяца', 'месяцев');			break;			case 'weeks':				return format::declension_numerals($amount, 'неделя', 'недели', 'недель');			break;			case 'days':				return format::declension_numerals($amount, 'день', 'дня', 'дней');			break;			case 'hours':				return format::declension_numerals($amount, ' час', ' часа', ' часов');			break;			case 'minutes':				return format::declension_numerals($amount, ' минута', ' минуты', ' минут');			break;			case 'seconds':				return format::declension_numerals($amount, ' секунда', ' секунды', ' секунд');			break;		endswitch;				return '';			}/** * gets Array and outputs string */	public function arrayToDate($arr){		$date = ''; $cmonth = '01'; $cday = '01';		if($year = preg_replace('/\D/', '', $arr['year'])):			$date = $year;			$cyear = $year;			if(!empty($arr['month']) and $month = preg_replace('/\D/', '', $arr['month'])):				$date .= '-'.$month;				$cmonth = $month;				if(!empty($arr['day']) and $day = preg_replace('/\D/', '', @$arr['day'])):					$date .= '-'.$day;					$cday = $day;				endif;			endif;		endif;		if(!empty($year) and checkdate((int) $cmonth, (int) $cday, (int) $cyear)):			return $date;		else:			return '';		endif;	}		/** * Date formatting */		public static function getYear($datetime = NULL){		$datetime = self::now($datetime);		return date('Y', $datetime);	}			public static function getMonth($datetime = NULL){			$datetime = self::now($datetime);				return date('m', $datetime);	}			public static function getDay($datetime = NULL){			$datetime = self::now($datetime);				return date('d', $datetime);	}	public static function getWeekDay($datetime = NULL){			$datetime = self::now($datetime);				return date('w', $datetime);	}	public static function getMinute($datetime = NULL){			$datetime = self::now($datetime);				return date('i', $datetime);	}		public static function getHour($datetime = NULL){			$datetime = self::now($datetime);				return date('H', $datetime);	}		public static function getSecond($datetime = NULL){			$datetime = self::now($datetime);				return date('s', $datetime);	}			public function getLocalizedDateDayTime($datetime = NULL){			$datetime = self::now($datetime);				return sprintf(self::$localizedWDateTime,			self::getDay($datetime),			self::getDeclensedMonth((int) self::getMonth($datetime)),			self::getDeclensedWeekDay((int) self::getWeekDay($datetime)),			self::getHour($datetime),			self::getMinute($datetime));    }				public function getLocalizedDateTime($datetime = NULL, $format = NULL){			$datetime = self::now($datetime);				if(empty($format)) $format = self::$localizedDateTime;				return sprintf($format,			self::getDay($datetime),			self::getDeclensedMonth((int) self::getMonth($datetime)),			self::getYear($datetime),			self::getHour($datetime),			self::getMinute($datetime));    }		public static function getLocalizedDate($datetime = NULL, $format = NULL){			$datetime = self::now($datetime);				if(empty($format)) $format = self::$localizedDate;		return sprintf($format,			self::getDay($datetime),			self::getDeclensedMonth((int) self::getMonth($datetime)),			self::getYear($datetime));    }				    private static function getDeclensedMonth($num = NULL) {		if (!$num) {			$num = (int) self::getMonth();		}		if (isset(self::$declensed_months[$num])) {			return self::$declensed_months[$num];		}				return "";    }				private static function getDeclensedWeekDay($num = NULL) {				if (!$num) {			$num = self::getWeekDay();		}				if (isset(self::$weekdays[$num])) {			return self::$weekdays[$num];		}				return "";    }		static $relative_format_wt = '<b>%s</b> %02d:%02d';			static function getRelativeDatetime($datetime){		$year = self::getYear($datetime);		$month = self::getMonth($datetime);		$day = self::getDay($datetime);				$unix_date = strtotime("$year-$month-$day");				$relative = '';				if ($unix_date == strtotime("today")) {			$relative = 'Сегодня';		} elseif ($unix_date == strtotime("yesterday")) {			$relative = 'Вчера';		}		if(!empty($relative))			return sprintf(self::$relative_format_wt, $relative, self::getHour($datetime), self::getMinute($datetime));		else			return sprintf(self::$localizedDateTimeWOYear,			$day,			self::getDeclensedMonth((int) $month),			self::getHour($datetime),			self::getMinute($datetime));					}		static function convertIncomplete($datetime, $format = 'day.LMonth.year'){			if(empty($datetime)) return '';				$datetime = explode(' ', $datetime);		$date = explode('-', $datetime[0]);		$time = explode(':', @$datetime[1]);        $output = array();		switch($format):			case 'day.month.year':				if(!empty($date[2])) $output[] = $date[2];				if(!empty($date[1])) $output[] = $date[1];				if(!empty($date[0])) $output[] = $date[0];				return join('.', $output);			break;			case 'year.month.day':				if(!empty($date[0])) $output[] = $date[0];				if(!empty($date[1])) $output[] = $date[1];				if(!empty($date[2])) $output[] = $date[2];				return join('.', $output);			break;			case 'day.DeclensedMonth.year':				if(!empty($date[2])) $output[] = $date[2];				if(!empty($date[1])) $output[] = self::$declensed_months[(int) $date[1]];				if(!empty($date[0])) $output[] = $date[0];				return join(' ', $output);			break;			case 'day.LMonth.year':				if(!empty($date[2])) $output[] = $date[2];				if(!empty($date[1])) $output[] = self::$months[(int) $date[1]];				if(!empty($date[0])) $output[] = $date[0];				return join(' ', $output);			break;		endswitch;        return '';	}	}/* ?> */