<?php defined('SYSPATH') or die('No direct script access.');class Payment_Controller extends Controller {	private $base_url = '/my/payment';	public function __construct()	{		parent::__construct();		$this->perpage = 30;				if(!$this->hasAccess('enabled')):			return;				else:			$this->template->titleBlock = new View('my/b_title_view');		endif;	}		public function index($page = 0){				if(!$this->hasAccess('enabled')) return;		if((int) @$_GET['y']):			$this->date = (int) $_GET['y'];					if((int) @$_GET['m']):								$this->date .= '-';				if((int) $_GET['m'] < 10) $this->date .= '0';				$this->date .= (int) $_GET['m'];							endif;		endif;						$this->title = $this->template->titleBlock->title = "Платежи";		$this->template->titleBlock->pageid = 'payment';							$y = date::getYear();		while($y >= 2009):			$years[] = $y;			$y--;		endwhile;				$this->view = new View('my/payment_view');		$this->noindex = true;					$this->payments = ORM::factory('payment');		/** * Помечаем просроченные платежи */		$this->payments->markExpired($this->user->id);						$this->setFilters();				$paymentsCount = $this->payments->count_all();				if(!empty($paymentsCount)):						$paginationConfig = array(				'total_items'    => $paymentsCount, // use db count query here of course				'items_per_page' => $this->perpage, // it may be handy to set defaults for stuff like this in config/pagination.php//				'item_title'		=> '',			);						$pagination = new Pagination($paginationConfig);						$this->setFilters();						$this->view->paymentList = $this->payments->find_all($this->perpage, ($pagination->current_page > 0 ? $pagination->current_page - 1:0) * $this->perpage);						$this->view->pagination = $pagination;					endif;				$this->view->year = @$this->year;		$this->view->month = @$this->month;		$this->view->years = $years;			}		private function setFilters(){		$this->payments->where('user_id', $this->user->id);		if(!empty($this->date)):			$this->payments->like('added' , $this->date); 		endif;	}		public function offer($offer_id = NULL, $service_id = NULL){				if(!$this->hasAccess('enabled')) return;				if(!empty($offer_id) and (intVal($offer_id) == 0)):			$service_id = $offer_id;			unset($offer_id);		endif;				if(!empty($_POST['service_id'])):					$service_id = $_POST['service_id'];					endif;				if(!empty($service_id) and !in_array($service_id, array_keys(Lib::config('payment.service')))):						$this->errors->add('Вы выбрали несуществующий сервис!');			return;					endif;			if(empty($service_id)) $service_id = Lib::config('payment.default_service');				$offers = ORM::factory('offer');				if(!$this->isModerator()):			$offers->where('user_id', $this->user->id);		endif;				if(!empty($_REQUEST['id']) and is_array($_REQUEST['id']) and count($_REQUEST['id'])):					$offers->in('id',$_REQUEST['id']);								elseif(!empty($offer_id)):						$offers->where('id',$offer_id);								else:					$this->errors->add('Вы не выбрали ни одного объявления!');			return;					endif;							$objList = $offers->find_all_in_Category(0);						if($objList->count()):			if(!empty($_POST['proceed'])):								$_POST = new Validation($_POST);								$_POST->pre_filter('trim',true)					->add_rules('method_id','required')					->add_rules('service_id','required')					->add_rules('id','required');										if(empty($_POST->count)) $_POST->count = 1;					if($_POST->validate()):										$tariff = ORM::factory('tariff')						->where('service', $_POST->service_id)						->where('method', $_POST->method_id)						->where('status', 'enabled')						->find();											if($tariff->id):											$service = Lib::config('payment.service', $_POST->service_id);						$method = Lib::config('payment.method', @$_POST['method_id']);												if($obj_count = $objList->count()):													$obj_links = array();							foreach($objList as $obj):								$obj_links[] = '<a href="'.$obj->url.'">№'.$obj->id.'</a>';							endforeach;												endif;												if (isset($service['amount']) && $service['amount']!=NULL)						{							$price = intVal($tariff->price/ $service['amount'] * $_POST->count) * $obj_count;						}						else						{							$price = $tariff->price * $_POST->count * $obj_count;						}												if(!empty($method['discount_enabled']) and !empty($this->user->discount)):							$price -= $price*$this->user->discount/100;						endif;												if($_POST->method_id == 'bonus' AND ($this->user->bonus_amount == 0 OR $price > $this->user->bonus_amount)):													$this->errors->add('У Вас '.format::declension_numerals($this->user->bonus_amount?$this->user->bonus_amount:0, Lib::config('payment.unit','bonus')).'. Этого недостаточно для оплаты. <a href="'.$this->base_url.'/bonus/">Купить бонусы?</a>');													else:													$this->payment = new Payment_Model;							$this->payment->service = $_POST->service_id;							$this->payment->method = $_POST->method_id;							$this->payment->user_id = $this->user->id;							$this->payment->price = $price;							$this->payment->currency = $method['currency'];							$this->payment->units_bought = $_POST->count;														$this->payment->details = /*$service['title'] . '. '								.*/ $service['details'] . ' ' 								. format::declension_numerals($obj_count, Lib::config('app.declensions','offer'))								. ' ('. join(', ',@$obj_links) .')'								. ((!empty($service['amount']) and $service['unit'] === 'day') ? ' на ' . format::declension_numerals($_POST->count, Lib::config('payment.unit','day')):'')								. '. '								. 'Оплата через '. $method['title'] .'.'							;																				if(!empty($method['convert'])):								$this->payment->final_price = $price * ORM::factory('exchange')->getCurrent()->{$method['currency']};								$this->payment->final_currency = Lib::config('payment.main_currency');							else:								$this->payment->final_price = $this->payment->price;								$this->payment->final_currency = $this->payment->currency;							endif;					/** * Связываем объявления */														foreach($objList as $obj):								$objIDs[] = $obj->id;								$this->payment->add($obj);							endforeach;																						if($this->payment->save()):																if($_POST->method_id === 'bonus'):									if($this->payment->setStatus('complete')):																				if (request::is_ajax() && ($_POST['proceed'] == 1)):												$this->view = new View('offer/offer_message_success_view');														$this->noindex = true;												$this->title = Kohana::lang('offers.offer_'.$_POST->service_id.'_success');												$this->view->offer_id = $objList[0]->id;												$this->data['id'] = $objList[0]->id;												$this->data['bonus_amount'] = $this->user->account->reload()->bonuses;												switch ($_POST->service_id)												{													case 'premium':														$service_date = ORM::factory('offer', $offer_id)->premium_till;														$this->data['date'] = date::getLocalizedDateTime($service_date);														break;													case 'mark':														$service_date = ORM::factory('offer', $offer_id)->marked_till;														$this->data['date'] = date::getLocalizedDateTime($service_date);														break;												}//												$this->returnViewInAjax = true;										else:												$this->redirect = $this->payment->url_success;																			endif;																			endif;															else:																		Session::instance()->set('payment_proceed_referer', $this->base_url.'/offer/'.$this->payment->service.'/?id[]='.join('&id[]=',$objIDs));																	$this->redirect = $this->payment->url_proceed;																	endif;																							endif;													endif;						else:						$this->errors->add('Сервис или способ оплаты не найдены!');					endif;									else:									$this->errors->add($_POST->list_errors());									endif;							else:							if(!request::is_ajax()):				$this->title = $this->template->titleBlock->title = "Оплата услуг";				$this->template->titleBlock->pageid = 'payment_offer';				endif;					$tariffs = ORM::factory('tariff')->where('service',$service_id)->where('status','enabled')->find_all()->as_id_array('method');						if(count($tariffs)):							$this->view = new View('my/payment_offer_view');				$this->addJs('payment.js');				$this->noindex = true;									$this->view->bonus_amount = $this->user->account->bonuses;				//$this->view->balance = $this->user->account->balance;				$this->view->tariffs = $tariffs;								$this->view->method_id = (!empty($_POST['method_id']))? $_POST['method_id']:'bonus';				if(!empty($_POST['count'])) $this->view->count = $_POST['count'];								$this->view->service_id = $service_id;					$this->view->objList = $objList;										if(empty($_POST['proceed'])):					$this->returnViewInAjax = true;				endif;							else:				$this->messages->add('К сожалению, в данный момент этот сервис недоступен');			endif;						endif;						else: // objList->count()					$this->errors->add('			<b>Использование платных услуг невозможно:</b>			Выбранное объявление неактивно (отключено, просрочено или заблокировано).');					endif;						}		public function check_count(Validation $v){			if(empty($v->count)):			$v->add_error('count', 'Укажите правильно количество бонусов');		endif;					return true;			}		public function bonus(){				if(!$this->hasAccess('enabled')) return;				if(!empty($_POST['proceed'])):						$_POST = new Validation($_POST);						$_POST->pre_filter('trim',true)				->add_rules('method_id','required')				->add_rules('count', 'required', 'length[1,3]', array('valid','digit'))				->add_callbacks('count', array($this, 'check_count'))			;						if($_POST->validate()):								$_POST->service_id = 'bonus';									$tariff = ORM::factory('tariff')					->where('service', $_POST->service_id)					->where('method', $_POST->method_id)					->where('status', 'enabled')					->find();									if($tariff->id):									$service = Lib::config('payment.service', $_POST->service_id);					$method = Lib::config('payment.method', @$_POST['method_id']);										$price = $tariff->price * $_POST->count;										if(!empty($method['discount_enabled']) and !empty($this->user->discount)):						$price -= $price*$this->user->discount/100;					endif;										$this->payment = new Payment_Model;					$this->payment->service = $_POST->service_id;					$this->payment->method = $_POST->method_id;					$this->payment->user_id = $this->user->id;					$this->payment->price = $price;					$this->payment->currency = $method['currency'];					$this->payment->units_bought = $_POST->count;										$this->payment->details = /*$service['title'] . '. '						.*/ $service['details'] . ' ' 						. format::declension_numerals($_POST->count, Lib::config('payment.unit',$_POST->service_id))						. '. '						. 'Оплата через '. $method['title'] .'.'					;																if(!empty($method['convert'])):						$this->payment->final_price = $price * ORM::factory('exchange')->getCurrent()->{$method['currency']};						$this->payment->final_currency = Lib::config('payment.main_currency');					else:						$this->payment->final_price = $this->payment->price;						$this->payment->final_currency = $this->payment->currency;					endif;																if($this->payment->save()):											Session::instance()->set('payment_proceed_referer', $this->base_url.'/bonus/');												$this->redirect = $this->payment->url_proceed;									endif;				else:					$this->errors->add('Способ оплаты не найден!');				endif;							else:							$this->errors->add($_POST->list_errors());							endif;					endif;					if(!request::is_ajax()):					$this->title = $this->template->titleBlock->title = "Состояние личного счёта";			$this->template->titleBlock->pageid = 'bonus';							endif;						$tariffs = ORM::factory('tariff')->where('service','bonus')->where('status','enabled')->find_all()->as_id_array('method');				if(count($tariffs)):							$this->view = new View('my/payment_bonus_view');			$this->addJs('payment.js');			$this->noindex = true;							$this->view->tariffs = $tariffs;						if(!empty($_POST['method_id'])) $this->view->method_id = $_POST['method_id'];			if(!empty($_POST['count'])) $this->view->count = $_POST['count'];						if(empty($_POST['proceed'])):				$this->returnViewInAjax = true;			endif;					else:			$this->messages->add('К сожалению, в данный момент покупка бонусов недоступна');		endif;	}			public function proceed($id = NULL){				if(!$this->hasAccess('enabled')) return;									if(empty($id)):			return $this->errors->add('Не указан номер платежа');		endif;				if(empty($this->payment)):			$this->payment = ORM::factory('payment',$id);		endif;				if($this->payment->id == 0):			return $this->errors->add('Платежа с таким номером не найдено');		endif;				$this->template_file = 'my/payment_states_view';		$this->title = 'Оплата платежа';		parent::__construct();				$this->template->mode = 'proceed';		$this->template->payment = $this->payment;				$order['id'] = $this->payment->id;		$order['orderDescription'] = Lib::config('payment.service',$this->payment->service,'title') . ' на ' . Lib::config('app.title');		$order['description'] = strip_tags($this->payment->details);		$order['price'] = preg_replace('/,/', '.', $this->payment->final_price);		$order['return_url'] = Lib::config('app.url').$this->payment->url_confirm;				$paymentSystem = PaymentSystem::getPaymentSystem($this->payment->method);				$this->template->paymentSystemForm = $paymentSystem->generateForm($order);			}		public function confirm($method = NULL){				$this->title = 'Подтверждение платежа';		$this->template->titleBlock = NULL;				if(empty($method) or !$paymentSystem = PaymentSystem::getPaymentSystem($method)):			@Lib::log('Ошибка подтверждения платежа: Платёжная система ('.$method.') не поддерживается!');			return $this->errors->add('Эта платёжная система не поддерживается!');		endif;				if(!$paymentSystem->verifyResponse()):			return $this->errors->add('Неверные данные!');		endif;				$response = $paymentSystem->getResponse();				$this->payment = ORM::factory('payment', $response['order_id']);				if($this->payment->id == 0):			@Lib::log('Ошибка подтверждения платежа: Платежа с таким номером ('.$response['order_id'].') не найдено!');			return $this->errors->add('Платежа с таким номером не найдено');		endif;				$this->payment->ps_transaction_id = $response['ps_transaction_id'];		$this->payment->details .= ' Транзакция №'.$response['ps_transaction_id'].'.';						if($this->payment->setStatus('complete')):					$this->template_file = 'my/payment_states_view';			parent::__construct();						$this->title = 'Подтверждение платежа';						$this->template->mode = 'confirm';			$this->template->payment = $this->payment;				endif;				}				public function success($id = NULL){			if(empty($id) and empty($this->payment)):			return $this->errors->add('Не указан номер платежа');		endif;				if(empty($this->payment)):			$this->payment = ORM::factory('payment',$id);		endif;				if($this->payment->id == 0):			return $this->errors->add('Платежа с таким номером не найдено');		endif;				$this->view = new View('my/payment_success_view');		$this->title = $this->template->titleBlock->title = 'Оплата услуг';		$this->noindex = true;			}	public function cancel($id = NULL){				if(!$this->hasAccess('enabled')) return;								if(empty($id)):			return $this->errors->add('Не указан номер платежа');		endif;				if(empty($this->payment)):			$this->payment = ORM::factory('payment',$id);		endif;				if($this->payment->id == 0):			return $this->errors->add('Платежа с таким номером не найдено');		endif;				$payment_proceed_referer = Session::instance()->get('payment_proceed_referer');				if(!empty($payment_proceed_referer)):			$this->payment->delete();			$this->redirect = $payment_proceed_referer;		else:			$this->payment->setStatus('cancelled');			$this->redirect = $this->base_url;		endif;					}}