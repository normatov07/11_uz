<?php defined('SYSPATH') or die('No direct script access.');class User_Model extends ORM {	protected $belongs_to = array('region');	protected $has_many = array('messages','offers','bookmarks','complaints', 'status_changes', 'payments');	protected $has_one = array(		'user_stat',		'user_password',		'user_session',		'user_activation',		'user_changed_email',		'account',        'user_certificate'		);	protected $has_and_belongs_to_many = array('regions');	protected $primary_val = 'email';	protected $sorting = array('registered'=>'desc');//	private $excludefromdata = array('');	public function __construct($id=NULL)	{		parent::__construct($id);		if(empty($id)):			$this->setRegistration();			$this->setLastActivity();			$this->generate_user_key();			$this->user_key_expire = time();			$this->setUpdated();		endif;	}	public function __get($column){		switch((string) $column):/** * ROLE RELATED */			case 'is_moderator':				if (!isset($this->object[$column])) {					$this->object[$column] = ($this->role == 'moderator' or $this->role == 'administrator');				}				return $this->object[$column];			break;			case 'is_administrator':				if (!isset($this->object[$column])) {					$this->object[$column] = ($this->role == 'administrator');				}				return $this->object[$column];			break;			case 'is_agent':				if (!isset($this->object[$column])) {					$this->object[$column] = ($this->role == 'agent');				}				return $this->object[$column];			break;			case 'is_company':				if (!isset($this->object[$column])) {					$this->object[$column] = ($this->role == 'company');				}				return $this->object[$column];			break;			case 'is_realtor':				if (!isset($this->object[$column])) {					$this->object[$column] = ($this->role == 'realtor');				}				return $this->object[$column];			break;/* NAME */			case 'own_name':				if (empty($this->object[$column])) {					$this->object[$column] = !empty($this->name)? $this->name : $this->email;				}				return $this->object[$column];			break;			case 'contact_name':				if (!isset($this->object[$column])) {					$this->object[$column] = !empty($this->name)? $this->name : '';				}				return @$this->object[$column];			break;			case 'public_name':				if (empty($this->object[$column])) {					$this->object[$column] = (/*$this->name_status == 'enabled' && */$this->contact_name)? $this->contact_name : 'Имя не указано';				}				return $this->object[$column];			break;			case 'public_name_html':				if (empty($this->object[$column])) {					$this->object[$column] = '<b><a href="'.$this->url.'">' . $this->public_name . '</a></b>';				}				return $this->object[$column];			break;/* EMAIL */			case 'contact_email':				if (empty($this->object[$column])) {					if(!empty($this->secondary_email)){						$this->object[$column] = $this->secondary_email;					}else{						$this->object[$column] = $this->email;					}				}				return @$this->object[$column];			break;			case 'public_email':				if (!isset($this->object[$column])) {					if($this->email_status == 'enabled'):						$this->object[$column] = $this->contact_email;					else:						$this->object[$column] = '';					endif;				}				return $this->object[$column];			break;			case 'public_email_html':				if (!isset($this->object[$column])) {//					$this->object[$column] = $this->public_email?html::mailto($this->public_email):'Скрыто';					$this->object[$column] =  $this->contact_email;				}				return $this->object[$column];			break;/* PHONE */			case 'public_phone':				if (!isset($this->object[$column])) {					if(!empty($this->phone)):						$this->object[$column] = $this->phone;					else:						$this->object[$column] = '';					endif;				}				return $this->object[$column];			break;			case 'public_phone_html':				if (empty($this->object[$column])) {					if($this->public_phone):						$this->object[$column] = '<b>'.format::phone($this->public_phone, NULL, TRUE).'</b>';					else:						$this->object[$column] = 'Не указан';					endif;				}				return $this->object[$column];			break;/** * PREPARED DATA */			case 'relative_last_activity':				if (!isset($this->object[$column])) {					if(!empty($this->last_activity)):						$this->object[$column] = date::getRelativeDateTime($this->last_activity);					else:						$this->object[$column] = '';					endif;				}				return $this->object[$column];			break;			case 'simple_last_activity':				if (!isset($this->object[$column])) {					if(!empty($this->last_activity)):						$this->object[$column] = date::getSimple($this->last_activity);					else:						$this->object[$column] = '';					endif;				}				return $this->object[$column];			break;/** * URLS */			case 'url':				if (empty($this->object[$column])) {					$this->object[$column] = '/offerer/' . $this->id .'/';				}				return $this->object[$column];			break;			case 'url_offers':				if (empty($this->object[$column])) {					$this->object[$column] = $this->url . '#offers';				}				return $this->object[$column];			break;			case 'url_edit':				if (empty($this->object[$column])) {					$this->object[$column] = '/adm/user/'.$this->id.'/';				}				return $this->object[$column];			break;			case 'url_check':				if (empty($this->object[$column])) {					$this->object[$column] = $this->url_edit . 'check/';				}				return $this->object[$column];			break;			case 'url_uncheck':				if (empty($this->object[$column])) {					$this->object[$column] = $this->url_edit . 'uncheck/';				}				return $this->object[$column];			break;			case 'url_delete':				if (empty($this->object[$column])) {					$this->object[$column] = $this->url_edit . 'delete/';				}				return $this->object[$column];			break;			case 'url_delete_success':				if (empty($this->object[$column])) {					$this->object[$column] = $this->url_edit . 'delete_success/';				}				return $this->object[$column];			break;			case 'url_ban':				if (empty($this->object[$column])) {					$this->object[$column] = $this->url_edit . 'ban/';				}				return $this->object[$column];			break;			case 'url_ban_success':				if (empty($this->object[$column])) {					$this->object[$column] = $this->url_edit . 'ban_success/';				}				return $this->object[$column];			break;			case 'url_unban':				if (empty($this->object[$column])) {					$this->object[$column] = $this->url_edit . 'unban/';				}				return $this->object[$column];			break;			case 'url_unban_success':				if (empty($this->object[$column])) {					$this->object[$column] = $this->url_edit . 'unban_success/';				}				return $this->object[$column];			break;			case 'url_add_bonus':				if (empty($this->object[$column])) {					$this->object[$column] = '/adm/bonus/'.$this->id.'/';				}				return $this->object[$column];			break;/** * Counters */			case 'messages_count':				if (!isset($this->object[$column])) {					$this->object[$column] = ORM::factory('message')->countIncoming($this->id);				}				return $this->object[$column];			break;			case 'new_messages_count':				if (!isset($this->object[$column])) {					$this->object[$column] = ORM::factory('message')->countIncoming($this->id, 'new');				}				return $this->object[$column];			break;			case 'bookmarks_count':				if (!isset($this->object[$column])) {					$this->object[$column] = ORM::factory('bookmark')->count_all_by_user($this->id);				}				return $this->object[$column];			break;			case 'active_offers_count':				if (!isset($this->object[$column])) {					$this->object[$column] = ORM::factory('offer')->count_all_by_user($this->id, 'enabled', $this->is_agent);				}				return $this->object[$column];			break;			case 'offers_count':				if (!isset($this->object[$column])) {					$this->object[$column] = ORM::factory('offer')->count_all_by_user($this->id, NULL, $this->is_agent);				}				return $this->object[$column];			break;			case 'enabled_offers_count':				if (!isset($this->object[$column])) {					$this->object[$column] = ORM::factory('offer')->count_all_by_user($this->id, 'enabled', $this->is_agent);				}				return $this->object[$column];			break;			case 'bonus_amount':				if (!isset($this->object[$column])) {					$this->object[$column] = $this->account->bonuses?$this->account->bonuses:($this->account->total_bonuses?'0':NULL);				}				return $this->object[$column];			break;            case 'balance':                if (!isset($this->object[$column])) {                    $this->object[$column] = $this->account->balance? $this->account->balance: 0;                }                return $this->object[$column];                break;/** * STATUS RELATED */			case 'is_enabled':				if (!isset($this->object[$column])) {					$this->object[$column] = ($this->status === 'enabled');				}				return $this->object[$column];			break;			case 'status_change':				if (!isset($this->object[$column])) {					$this->object[$column] = $this->getStatusChange();				}				return $this->object[$column];			break;		endswitch;		return parent::__get($column);	}	public function save() {		return parent::save();	}	private function setLastActivity() {		$this->last_activity = time();	}	private function setRegistration() {		$this->registered = date::getForDb();	}	public function setUpdated() {		$this->updated = date::getForDb();	}	public function setActivated() {		if($this->user_activation) $this->user_activation->delete();		if($this->status === 'disabled'):			foreach($this->offers as $item){				$item->expiration = date::getForDb(time() + (strtotime($item->expiration) -  strtotime($item->added)));				$item->added = $item->positioned = date::getForDb();				$item->setEnabled();			}			$this->status = 'enabled';			$this->setUpdated();			return $this->save();		else:			return true;		endif;	}	public function setBanned($by = NULL, $reason = NULL){		if(!empty($this->id)):			if($this->status != 'banned'):				foreach($this->offers as $item){					$item->setUserBanned($by, $reason);				}				$this->setStatusChange('banned', $this->status, $by, $reason);				$this->status = 'banned';				$changed = true;			else:				$this->setStatusChange('banned', NULL, $by, $reason);			endif;			if($this->checked != 1):				$this->checked = 1;				$changed = true;			endif;			if(!empty($changed)):				return $this->save();			else:				return true;			endif;		endif;		return false;	}	public function unBan($id = NULL){		if(!empty($this->id)):			$status_change = $this->getStatusChange('banned');			if($status_change->id or $this->status === 'banned'):				foreach($this->offers as $item){					$item->unsetUserBanned();				}				if($this->status === 'banned'):					$this->status = $status_change->prev_status;					$changed = true;				endif;				if($status_change->id):					$status_change->delete();				endif;			endif;			if($this->checked != 1):				$this->checked = 1;				$changed = true;			endif;			if(!empty($changed)):				return $this->save();			else:				return true;			endif;		endif;		return false;	}	public function setChecked() {		if(!empty($this->id)):			$this->checked = 1;			return $this->save();		endif;	}	public function unCheck() {		if(!empty($this->id)):			$this->checked = 0;			return $this->save();		endif;	}	public function isActivated() {		return $this->status !== 'disabled';	}	public function generate_user_key($len = 60) {		$this->user_key = md5(text::random('alnum', $len));	}}/* ?> */